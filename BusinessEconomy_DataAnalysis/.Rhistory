ggplot(aes(price,color=cut))+
geom_freqpoly()
diamonds %>%
ggplot(aes(price,color=cut))+
geom_freqpoly(binwidth = 500)
diamonds %>%
ggplot(aes(price, y = ..density..,color=cut))+
geom_freqpoly(binwidth = 500)
diamonds %>%
ggplot(aes(price,color=cut))+
geom_freqpoly(binwidth = 500,stat = 'fill')
diamonds %>%
ggplot(aes(price,color=cut))+
geom_freqpoly(binwidth = 500,position = 'fill')
diamonds %>%
ggplot(aes(price, y = ..density..,color=cut))+
geom_freqpoly(binwidth = 500)
diamonds %>%
ggplot(aes(price,color=cut))+
geom_freqpoly(position = 'fill')
# 7
diamonds %>%
ggplot(aes(price,color=cut))+
geom_boxplot()
# 7
diamonds %>%
ggplot(aes(cut,price))+
geom_boxplot()
# 7
diamonds %>%
ggplot(aes(class,hwp))+
geom_boxplot()
diamonds
# 7
diamonds %>%
ggplot(aes(class,hwy))+
geom_boxplot()
# 7
diamonds %>%
ggplot(aes(class,y))+
geom_boxplot()
diamonds
## test_ggplot_01.hwp
data("diamonds")
## test_ggplot_01.hwp
data(diamonds)
## test_ggplot_01.hwp
str(data(diamonds))
diamonds
View(diamonds)
# 7
mpg %>%
ggplot(aes(class,y))+
geom_boxplot()
# 7
mpg %>%
ggplot(aes(class,hwy))+
geom_boxplot()
# 7
diamonds %>%
ggplot(aes(class,price))+
geom_boxplot()
cut
# 7
diamonds %>%
ggplot(aes(cut,price))+
geom_boxplot()
## test_ggplot_01.hwp
# 1
diamonds
library(EBImage)
install.packages("EBImage")
install.packages("magick")
library(magick)
str(magick::magick_config())
# str(magick::magick_config())
# ?image_read
gh <- image_read("C:/Users/Jiwan/NaverCloud/2018 수업자료/경영경제데이터분석 소프트웨어/01~. R 관련/still_life_with_Guitar_1922.jpg")
gh
# str(magick::magick_config())
# ?image_read
gh <- image_read("C:/Users/Jiwan/Desktop/still_life_with_Guitar_1922.jpg")
gh
## image_data() :이미지 데이터 보기
image_data(gh)
image_data(gh)[1, 680:692, 567:577]
## image_data() :이미지 데이터 보기
image_data(gh)
## image_border() : 이미지에 경계선넣기
image_border(gh, "blue", "20x10")
image_rotate(picaso, 45)
image_rotate(gh, 45)
image_crop(picaso, "300x400+50") #
image_crop(gh, "300x400+50") #
## 그림 쌓기
bigdata <- image_read('https://jeroen.github.io/images/bigdata.jpg')
frink <- image_read("https://jeroen.github.io/images/frink.png")
logo <- image_read("https://jeroen.github.io/images/Rlogo.png")
img <- c(bigdata, logo, frink)
img <- image_scale(img, "300x300")
image_info(img)
class(gh)
gh
image_mosaic(img)
image_flatten(img)
image_flatten(img, 'Add')
image_flatten(img)
image_mosaic(img)
image_crop(gh, "300x400+50") # 자르기
## 그림 붙이기
image_append(image_scale(img, "x200"))
image_append(image_scale(img, "100"), stack = TRUE)
##
library(magick)
library(ggplot2)
frink <- image_read("https://jeroen.github.io/images/frink.png")
bigdata <- image_read('https://jeroen.github.io/images/bigdata.jpg')
# frink에 대하여 높이를 445에서 200으로 줄이고, 300도 회전한다.
frink_scale <- image_scale(image_rotate(image_background(frink, "none"), 300), "x200")
frink_scale
# bigdata에 대하여 높이를 768에서 400으로 줄이고, frink_scale의 위치를 (180, 100)에 둔다.
image_composite(image_scale(bigdata, "x400"), frink_scale, offset = "+180+100")
##
logo <- image_read("https://jeroen.github.io/images/Rlogo.png")
bigdata <- image_read('https://jeroen.github.io/images/bigdata.jpg')
logo_200 <- image_scale(logo, "x200")
image_composite(image_scale(bigdata, "x400"), logo_200, offset = "+250+150")
install.packages("prettydoc")
#=================================================================
### 13.4 Report Doc_prettty doc.pdf
library(prettydoc)
# 글자크기 바꾸기
'그냥'
'---'
-
'==='
=
#'#'
###'###'
#####'#####'
# 수평선 그리기
***
---
# 순서있는 목차
1. aa
2. bb
# 순서없는 목차
* aa
- aa
+ aa
aaa<-c(aa,bb,cc)
aaa<-c('aa','bb','cc')
paste0(aaa)
car(paste0(aaa))
for (i in aaa){
cat(paste0(aaa))
}
for (i in aaa){
paste(paste0(aaa))
}
for (i in aaa){
paste(paste0(aaa))
}
for (i in aaa){
cat(paste0(aaa))
}
for (i in aaa){
paste0(aaa)
}
for (i in aaa){
cat(aaa)
}
print(paste0(aaa))
for (i in aaa){
print(paste0(aaa))
}
for (i in aaa){
cat(aaa)
}
for (i in 1:3){
print(paste0(aaa))
}
for (i in aaa){
print(paste0(i))
}
for (i in aaa){
cat(i)
}
aa<-1
bb<-2
cc<-3
aaa<-c(aa,bb,cc)
for (i in aaa){
print(paste0(i))
}
for (i in aaa){
cat(i)
}
print(i)
for (i in aaa){
print(i)
}
for (i in aaa){
print(i)
}
for (i in aaa){
cat(i)
}
for (i in 1:3){
print(paste0(aaa))
}
for (f in 1:3) {
cat(paste0("![image_label](", f, ")\n"))
}
for (f in 1:3) {
for (f in 1:3) {
}
}
for (f in 1:3) {
cat(paste0("a", f, "3")
}
for (f in 1:3) {
cat(paste0("a", f, "3"))
}
for (f in 1:3) {
cat(paste0("a", f, "\n"))
}
for (f in 1:3) {
cat(paste0("a", f, "\n"))
}
for (f in 1:3) {
print(cat(paste0("a", f, "\n")))
}
install.packages("leaflet")
a <- rnorm(1000)
hist(a, col="blue")
mean(a)
plot(cars)
a <- rnorm(1000)
hist(a, col="orange")
a <- rnorm(1000)
hist(a, col="blue")
mean(a)
library(ggplot2)
ggplot(cars, aes(speed, dist)) + geom_point()
ggplot(cars, aes(speed, dist)) + geom_point()
ggplot(cars, aes(speed, dist)) + geom_point()
ggplot(cars, aes(speed, dist)) + geom_point()
knitr::include_graphics("https://upload.wikimedia.org/wikipedia/commons/thumb/2/2e/MC_
Drei-Finger-Faultier.jpg/330px-MC_Drei-Finger-Faultier.jpg")
knitr::kable(head(mtcars))
head(mtcars)
mtcars
## 이미지 + 저수준 그래프
library(magick)
str(magick::magick_config())
frink <- image_read("https://jeroen.github.io/images/frink.png")
img <- image_draw(frink)
rect(20, 20, 200, 100, border = "red", lty = "dashed", lwd = 5)
abline(h = 300, col = 'blue', lwd = '10', lty = "dotted")
text(30, 250, "Hoiven-Glaven", family = "monospace", cex = 4, srt = 90)
img <- image_draw(frink)
rect(20, 20, 200, 100, border = "red", lty = "dashed", lwd = 5)
abline(h = 300, col = 'blue', lwd = '10', lty = "dotted")
text(30, 250, "Hoiven-Glaven", family = "monospace", cex = 4, srt = 90)
img
img
rect(20, 20, 200, 100, border = "red", lty = "dashed", lwd = 5)
abline(h = 300, col = 'blue', lwd = '10', lty = "dotted")
frink
rect(20, 20, 200, 100, border = "red", lty = "dashed", lwd = 5)
abline(h = 300, col = 'blue', lwd = '10', lty = "dotted")
text(30, 250, "Hoiven-Glaven", family = "monospace", cex = 4, srt = 90)
palette(rainbow(11, end = 0.9))
symbols(rep(200, 11), seq(0, 400, 40), circles = runif(11, 5, 35), bg = 1:11, inches = FALSE, add = TRUE)
frink
rect(20, 20, 200, 100, border = "red", lty = "dashed", lwd = 5)
abline(h = 300, col = 'blue', lwd = '10', lty = "dotted")
img <- image_draw(frink)
rect(20, 20, 200, 100, border = "red", lty = "dashed", lwd = 5)
print(img)
print(img)
frink
print(img)
## 이미지 기타효과주기
frink <- image_read("https://jeroen.github.io/images/frink.png")
obama <- image_read('https://upload.wikimedia.org/wikipedia/commons/thumb/8/8d/President_Barack_Obama.jpg/800px-President_Barack_Obama.jpg')
image_charcoal(obama) %>%
image_composite(frink) %>%
image_annotate("CONFIDENTIAL", size = 50, color = "red", boxcolor = "pink",
degrees = 30, location = "+100+100") %>%
image_rotate(30)
install.packages("seewave")
library(seewave)
data(package="seewave")
data(tico)
tico
class(tico)
plot(tico@left)
v.sound <- sin(2*pi*440*seq(0,1, length.out = 8000))
v.sound_02 <- 2*sin(2*pi*440*seq(0,1, length.out = 8000))
v.sound_05 <- 5*sin(2*pi*440*seq(0,1, length.out = 8000))
plot(v.sound[1:100], type="l")
plot(v.sound_02[1:100], type="l")
plot(v.sound_05[1:100], type="l")
# 진폭은 소리의 크기
v.sound <- sin(2*pi*440*seq(0,1, length.out = 8000))
v.sound_02 <- 2*sin(2*pi*440*seq(0,1, length.out = 8000))
v.sound_05 <- 5*sin(2*pi*440*seq(0,1, length.out = 8000))
plot(v.sound[1:100], type="l")
plot(v.sound_02[1:100], type="l")
plot(v.sound_05[1:100], type="l")
# 주파수는 소리의 높낮이
sound_220 <- sin(2*pi*220*seq(0,1, length.out = 8000))
sound_440 <- sin(2*pi*440*seq(0,1, length.out = 8000))
sound_660 <- sin(2*pi*440*seq(0,1, length.out = 8000))
plot(sound_220[1:100], type="l")
plot(sound_440[1:100], type="l")
plot(sound_660[1:100], type="l")
plot(sound_220[1:100], type="l")
plot(sound_440[1:100], type="l")
plot(sound_660[1:100], type="l")
sound_660 <- sin(2*pi*660*seq(0,1, length.out = 8000))
plot(sound_220[1:100], type="l")
plot(sound_440[1:100], type="l")
plot(sound_660[1:100], type="l")
# 진폭이 다른 소리 데이터 듣기
listen(v.sound, f=22100)
# 진폭이 다른 소리 데이터 듣기
listen(v.sound, f=22100)
listen(v.sound_02, f=22100)
listen(v.sound_05, f=22100)
# 진폭이 다른 소리 데이터 듣기
listen(v.sound, f=22100)
v.sound_05 <- 10*sin(2*pi*440*seq(0,1, length.out = 8000))
listen(v.sound_05, f=22100)
v.sound_05 <- 30*sin(2*pi*440*seq(0,1, length.out = 8000))
listen(v.sound_05, f=22100)
listen(v.sound_05, f=22100)
# 진폭이 다른 소리 데이터 듣기
listen(v.sound, f=22100)
# 주파수가 다른 소리 데이터 듣기
listen(sound_220, f=22100)
listen(sound_440, f=22100)
listen(sound_660, f=22100)
# 도레미파솔라시도
duration01 <- 1
tempo <- 120
sample_rate <- 44100
C4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 261.63 * 2 * pi)
D4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 293.67 * 2 * pi)
E4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 329.63 * 2 * pi)
F4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 349.23 * 2 * pi)
G4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 392.00 * 2 * pi)
A4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 440.00 * 2 * pi)
B4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 493.88 * 2 * pi)
C5 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 523.25 * 2 * pi)
play(C4) ; play(D4) ; play(E4); play(F4); play(G4); play(A4) ;play(B4);play(C5)
library("audio")
install.packages("audio")
play(C4) ; play(D4) ; play(E4); play(F4); play(G4); play(A4) ;play(B4);play(C5)
library(audio)
play(C4) ; play(D4) ; play(E4); play(F4); play(G4); play(A4) ;play(B4);play(C5)
play(C4) ; play(D4) ; play(E4); play(F4); play(G4); play(A4) ;play(B4);play(C5)
play(C4)
play(D4)
# 진폭이 다른 소리 데이터 듣기
play(v.sound, f=22100)
play(v.sound_05, f=22100)
play(sound_440, f=22100)
# 주파수가 다른 소리 데이터 듣기
play(sound_220, f=22100)
# 진폭은 소리의 크기
v.sound <- sin(2*pi*220*seq(0,1, length.out = 8000))
v.sound_02 <- 2*sin(2*pi*220*seq(0,1, length.out = 8000))
v.sound_05 <- 5*sin(2*pi*220*seq(0,1, length.out = 8000))
# 진폭이 다른 소리 데이터 듣기
play(v.sound, f=22100)
play(v.sound_02, f=22100)
play(v.sound_05, f=22100)
# 진폭은 소리의 크기
v.sound <- 0.5*sin(2*pi*220*seq(0,1, length.out = 8000))
v.sound_02 <- sin(2*pi*220*seq(0,1, length.out = 8000))
v.sound_05 <- 3*sin(2*pi*220*seq(0,1, length.out = 8000))
# 진폭이 다른 소리 데이터 듣기
play(v.sound, f=22100)
play(v.sound_02, f=22100)
play(v.sound_05, f=22100)
v.sound_05 <- 2*sin(2*pi*220*seq(0,1, length.out = 8000))
play(v.sound_05, f=22100)
# 진폭은 소리의 크기
v.sound <- 0.2*sin(2*pi*220*seq(0,1, length.out = 8000))
v.sound_02 <- 0.6*sin(2*pi*220*seq(0,1, length.out = 8000))
v.sound_05 <- sin(2*pi*220*seq(0,1, length.out = 8000))
v.sound_02 <- 0.5*sin(2*pi*220*seq(0,1, length.out = 8000))
plot(sound_220[1:100], type="l")
plot(sound_440[1:100], type="l")
plot(sound_660[1:100], type="l")
# 진폭이 다른 소리 데이터 듣기
play(v.sound, f=22100)
play(v.sound_02, f=22100)
play(v.sound_05, f=22100)
# 주파수가 다른 소리 데이터 듣기
listen(sound_220, f=22100)
play(C4) ; play(D4) ; play(E4); play(F4); play(G4); play(A4) ;play(B4);play(C5)
# 도레미파솔라시도
duration01 <- 0.5
tempo <- 120
sample_rate <- 44100
C4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 261.63 * 2 * pi)
D4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 293.67 * 2 * pi)
E4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 329.63 * 2 * pi)
F4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 349.23 * 2 * pi)
G4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 392.00 * 2 * pi)
A4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 440.00 * 2 * pi)
B4 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 493.88 * 2 * pi)
C5 <- sin(seq(0, duration01 / tempo * 60, 1 / sample_rate) * 523.25 * 2 * pi)
play(C4) ; play(D4) ; play(E4); play(F4); play(G4); play(A4) ;play(B4);play(C5)
x <- cbind(x1= 7, x2 = c(7:1, 2:5))
x
class(x)
apply(x, 2, sum)
apply(x, 1, sum)
# lapply : list를
?lapply
?sapply
sum(x[,1]
)
sum(x[1,])
# lapply : list를
x_list <- list(x1= 7:1, x2 = c(7:1, 2:5))
x_list
lapply(x_list, sum)
lapply(x_list, sum)
lapply(x_list, mean)
sum(x_list)
sum(x_list[1])
sum(x_list[[1]])
lapply(x_list, sum) # sum(x_list[[1]])
sapply(x_list, mean)
class(sapply(x_list, mean))
lapply(x_list, mean)
sapply(x_list, mean)
# mapply :
s1 <- list(a = c(1:3), b = c(11:13))
s2 <- list(c = c(21:23), d = c(31:33))
s1
s2
mapply(sum, s1$a, s1$b, s2$c, s2$d)
x <- 1:10
ifelse(x> 5, "morethan5", "lessthan5")
# ifelse
x <- 1:10
y <- ifelse(x> 5, "morethan5", "lessthan5")
cbind(x, y)
(y <- ifelse(x> 5, "morethan5", "lessthan5"))
library(tidyverse)
trees
# 시험과 관련된 예제.
library(tidyverse)
trees
trees02 <- trees %>%
mutate(Volume2 = ifelse(Volume > 50, "large",
ifelse(Volume > 30, "middle", "large")))
trees02
for (x in 1:10)
{
print(x * 10)
}
x <- 10
if (x > 5) {
print(x)
}
x <- 10
if (x > 5) { print("yes")
} else {
print("no")
}
if (x > 5) { print("yes")
}
else {
print("no")
}
x <- 1:5
for (i in x) {
if (i == 3){
next
}
print(i)
}
x <- 1
repeat {
print(x)
x = x+1
if (x == 6){
break
}
}
while(True){
print(x)
x = x+1
if (x == 6){
break
}
}
while(T){
print(x)
x = x+1
if (x == 6){
break
}
}
